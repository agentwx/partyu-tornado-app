== Tornado on OpenShift ==

This article describes how to deploy a Tornado WSGI application on OpenShift.

Tornado is an open source version of the scalable, non-blocking web server and tools that power FriendFeed, here is how the typical 'hello world' looks like on it:

{{{

import tornado.ioloop
import tornado.web

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write("Hello, world")

application = tornado.web.Application([
    (r"/", MainHandler),
])

if __name__ == "__main__":
    application.listen(8888)
    tornado.ioloop.IOLoop.instance().start()

}}}

In the example above the app is spawned within a standalone web server, but you can make it to work as a WSGI instance, which is what we will need to do.

First, let's create our new app on OpenShift:

{{{

$ rhc-create-app -a hellotornado -t python-2.6
$ cd hellotornado

}}}

Tornado is not installed globally on OpenShift, we will add it as a requirement for our application egg.

Edit the 'setup.py' file, fill in your details and uncomment the 'install_requires' directive as follows:

{{{

install_requires=["tornado>=2.2"]

}}}

One could also add any further pythonic requirements here. For our test purposes the app is very simple, we just need Tornado. The setup.py file will look like this:

{{{

from setuptools import setup

setup(name='YourAppName',
    version='1.0',
    description='OpenShift App',
    author='Your Name',
    author_email='example@example.com',
    url='http://www.python.org/sigs/distutils-sig/',
    install_requires=['tornado>=2.2'],
   )

}}}

Now edit the wsgi/application file, remove the example code and populate it with your app code, as follows:

{{{

#!/usr/bin/python                                           
import os

virtenv = os.environ['APPDIR'] + '/virtenv/'
os.environ['PYTHON_EGG_CACHE'] = os.path.join(virtenv, 'lib/python2.6/site-packages')
virtualenv = os.path.join(virtenv, 'bin/activate_this.py')
try:
    execfile(virtualenv, dict(__file__=virtualenv))
except IOError:
    pass
#
# IMPORTANT: Put any additional includes below this line.  If placed above this
# line, it's possible required libraries won't be in your searchable path
#

import tornado.wsgi
import tornado.web

class MainHandler(tornado.web.RequestHandler):
    def get(self):
        self.write("Hello, world")

application = tornado.wsgi.WSGIApplication([
    (r"/", MainHandler),
])

#
# Below for testing only                            
#                                                 
if __name__ == '__main__':
    from wsgiref.simple_server import make_server
    httpd = make_server('localhost', 8051, application)
    # Wait for a single request, serve it and quit.
    httpd.handle_request()

}}}

We kept untouched the header, up and including to the virtualenv execution and the footer from the pre-existing file.

We replaced instead the example application code with our own. Compared to the initial 'hello world' example, the app has been slightly modified to be instantiated as a WSGI. More details on this topic are on the official Tornado documentation at: [[http://www.tornadoweb.org/documentation/wsgi.html]]

Now commit and push your project:
 
{{{

git add .
git commit -m "Initial commit"
git push

}}}

Go at http://hellotornado-$YOURDOMAIN.rhcloud.com and enjoy!

To run and test you application locally before committing, you need to recreate a python virtualenv similar to the one provisione by OpenShift in the cloud. This is a trivial task:

{{{

$ mkdir ~/openshift
$ vitualenv ~/openshift/virtenv
$ source ~/openshift/virtenv/bin/activate
$ pip install tornado
$ echo "export APPDIR=~/openshift/" >> .bashrc

}}}

You can launch your app with:

{{{

$ python wsgi/application

}}}

but don't forget to source the virtenv activate file first or it won't work. virtualenv is a tool to create isolated Python environments, you can get more details about it at [[http://pypi.python.org/pypi/virtualenv]].

have fun!